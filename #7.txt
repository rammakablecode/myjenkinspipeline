Started by user Rammaka Iddamalgoda
Lightweight checkout support not available, falling back to full checkout.
Checking out git https://github.com/rammakablecode/myjenkinspipeline into C:\ProgramData\Jenkins\.jenkins\workspace\myjenkinspipeline@script\e966eb9d244f113763caa88a0d3429df8260ecd64bb7e50f8e50985919af3ef4 to read Jenkinsfile
Selected Git installation does not exist. Using Default
The recommended git tool is: NONE
No credentials specified
Cloning the remote Git repository
Cloning repository https://github.com/rammakablecode/myjenkinspipeline
 > C:\Program Files\Git\cmd\git.exe init C:\ProgramData\Jenkins\.jenkins\workspace\myjenkinspipeline@script\e966eb9d244f113763caa88a0d3429df8260ecd64bb7e50f8e50985919af3ef4 # timeout=10
Fetching upstream changes from https://github.com/rammakablecode/myjenkinspipeline
 > C:\Program Files\Git\cmd\git.exe --version # timeout=10
 > git --version # 'git version 2.49.0.windows.1'
 > C:\Program Files\Git\cmd\git.exe fetch --tags --force --progress -- https://github.com/rammakablecode/myjenkinspipeline +refs/heads/*:refs/remotes/origin/* # timeout=10
 > C:\Program Files\Git\cmd\git.exe config remote.origin.url https://github.com/rammakablecode/myjenkinspipeline # timeout=10
 > C:\Program Files\Git\cmd\git.exe config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
Avoid second fetch
Seen branch in repository origin/main
Seen 1 remote branch
 > C:\Program Files\Git\cmd\git.exe show-ref --tags -d # timeout=10
Checking out Revision bee4ef0d6e4416770ae314d39f8c36aa5bc622d0 (origin/main)
 > C:\Program Files\Git\cmd\git.exe config core.sparsecheckout # timeout=10
 > C:\Program Files\Git\cmd\git.exe checkout -f bee4ef0d6e4416770ae314d39f8c36aa5bc622d0 # timeout=10
Commit message: "Add Jenkinsfile to define pipeline"
First time build. Skipping changelog.
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in C:\ProgramData\Jenkins\.jenkins\workspace\myjenkinspipeline
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Declarative: Checkout SCM)
[Pipeline] checkout
Selected Git installation does not exist. Using Default
The recommended git tool is: NONE
No credentials specified
Cloning the remote Git repository
Cloning repository https://github.com/rammakablecode/myjenkinspipeline
 > C:\Program Files\Git\cmd\git.exe init C:\ProgramData\Jenkins\.jenkins\workspace\myjenkinspipeline # timeout=10
Fetching upstream changes from https://github.com/rammakablecode/myjenkinspipeline
 > C:\Program Files\Git\cmd\git.exe --version # timeout=10
 > git --version # 'git version 2.49.0.windows.1'
 > C:\Program Files\Git\cmd\git.exe fetch --tags --force --progress -- https://github.com/rammakablecode/myjenkinspipeline +refs/heads/*:refs/remotes/origin/* # timeout=10
 > C:\Program Files\Git\cmd\git.exe config remote.origin.url https://github.com/rammakablecode/myjenkinspipeline # timeout=10
 > C:\Program Files\Git\cmd\git.exe config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
Avoid second fetch
Seen branch in repository origin/main
Seen 1 remote branch
 > C:\Program Files\Git\cmd\git.exe show-ref --tags -d # timeout=10
Checking out Revision bee4ef0d6e4416770ae314d39f8c36aa5bc622d0 (origin/main)
 > C:\Program Files\Git\cmd\git.exe config core.sparsecheckout # timeout=10
 > C:\Program Files\Git\cmd\git.exe checkout -f bee4ef0d6e4416770ae314d39f8c36aa5bc622d0 # timeout=10
Commit message: "Add Jenkinsfile to define pipeline"
[Pipeline] }
[Pipeline] // stage
[Pipeline] withEnv
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Build)
[Pipeline] echo
Stage 1: Build - Using Maven to compile and package code.
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Unit and Integration Tests)
[Pipeline] echo
Stage 2: Testing - Running JUnit for unit tests and TestNG for integration tests.
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Code Analysis)
[Pipeline] echo
Stage 3: Code Analysis - Using SonarQube to analyze code quality and standards.
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Security Scan)
[Pipeline] echo
Stage 4: Security Scan - Using OWASP Dependency-Check to scan for vulnerabilities.
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Deploy to Staging)
[Pipeline] echo
Stage 5: Deploy to Staging - Deploying to AWS EC2 using Ansible.
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Integration Tests on Staging)
[Pipeline] echo
Stage 6: Staging Tests - Running Postman or Newman tests against staging environment.
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Deploy to Production)
[Pipeline] echo
Stage 7: Deploy to Production - Deploying final version to production AWS EC2 using Ansible.
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS
